from PyQt4 import QtGui, QtCore
import sys
import numpy as np
import PIL

# standard ascii 5x7 font
# defines ascii characters 0x20-0x7F (32-127)
font = {
    '/'  :  [0x20, 0x10, 0x08, 0x04, 0x02],
#    ' '  :  [0x00, 0x00, 0x00, 0x00, 0x00],
#    '!'  :  [0x00, 0x00, 0x5F, 0x00, 0x00],
#    '"'  :  [0x00, 0x07, 0x00, 0x07, 0x00],
#    '#'  :  [0x14, 0x7F, 0x14, 0x7F, 0x14],
#    '$'  :  [0x24, 0x2A, 0x7F, 0x2A, 0x12],
#    '%'  :  [0x23, 0x13, 0x08, 0x64, 0x62],
#    '&'  :  [0x36, 0x49, 0x55, 0x22, 0x50],
#    "'"  :  [0x00, 0x05, 0x03, 0x00, 0x00],
#    '('  :  [0x00, 0x1C, 0x22, 0x41, 0x00],
#    ')'  :  [0x00, 0x41, 0x22, 0x1C, 0x00],
#    '*'  :  [0x08, 0x2A, 0x1C, 0x2A, 0x08],
#    '+'  :  [0x08, 0x08, 0x3E, 0x08, 0x08],
#    ','  :  [0x00, 0x50, 0x30, 0x00, 0x00],
#    '-'  :  [0x08, 0x08, 0x08, 0x08, 0x08],
#    '.'  :  [0x00, 0x60, 0x60, 0x00, 0x00],
#    '0'  :  [0x3E, 0x51, 0x49, 0x45, 0x3E],
#    '1'  :  [0x00, 0x42, 0x7F, 0x40, 0x00],
#    '2'  :  [0x42, 0x61, 0x51, 0x49, 0x46],
#    '3'  :  [0x21, 0x41, 0x45, 0x4B, 0x31],
#    '4'  :  [0x18, 0x14, 0x12, 0x7F, 0x10],
#    '5'  :  [0x27, 0x45, 0x45, 0x45, 0x39],
#    '6'  :  [0x3C, 0x4A, 0x49, 0x49, 0x30],
#    '7'  :  [0x01, 0x71, 0x09, 0x05, 0x03],
#    '8'  :  [0x36, 0x49, 0x49, 0x49, 0x36],
#    '9'  :  [0x06, 0x49, 0x49, 0x29, 0x1E],
#    ':'  :  [0x00, 0x36, 0x36, 0x00, 0x00],
#    ';'  :  [0x00, 0x56, 0x36, 0x00, 0x00],
#    '<'  :  [0x00, 0x08, 0x14, 0x22, 0x41],
#    '='  :  [0x14, 0x14, 0x14, 0x14, 0x14],
#    '>'  :  [0x41, 0x22, 0x14, 0x08, 0x00],
#    '?'  :  [0x02, 0x01, 0x51, 0x09, 0x06],
#    '@'  :  [0x32, 0x49, 0x79, 0x41, 0x3E],
#    'A'  :  [0x7E, 0x11, 0x11, 0x11, 0x7E],
#    'B'  :  [0x7F, 0x49, 0x49, 0x49, 0x36],
#    'C'  :  [0x3E, 0x41, 0x41, 0x41, 0x22],
#    'D'  :  [0x7F, 0x41, 0x41, 0x22, 0x1C],
#    'E'  :  [0x7F, 0x49, 0x49, 0x49, 0x41],
#    'F'  :  [0x7F, 0x09, 0x09, 0x01, 0x01],
#    'G'  :  [0x3E, 0x41, 0x41, 0x51, 0x32],
#    'H'  :  [0x7F, 0x08, 0x08, 0x08, 0x7F],
#    'I'  :  [0x00, 0x41, 0x7F, 0x41, 0x00],
#    'J'  :  [0x20, 0x40, 0x41, 0x3F, 0x01],
#    'K'  :  [0x7F, 0x08, 0x14, 0x22, 0x41],
#    'L'  :  [0x7F, 0x40, 0x40, 0x40, 0x40],
#    'M'  :  [0x7F, 0x02, 0x04, 0x02, 0x7F],
#    'N'  :  [0x7F, 0x04, 0x08, 0x10, 0x7F],
#    'O'  :  [0x3E, 0x41, 0x41, 0x41, 0x3E],
#    'P'  :  [0x7F, 0x09, 0x09, 0x09, 0x06],
#    'Q'  :  [0x3E, 0x41, 0x51, 0x21, 0x5E],
#    'R'  :  [0x7F, 0x09, 0x19, 0x29, 0x46],
#    'S'  :  [0x46, 0x49, 0x49, 0x49, 0x31],
#    'T'  :  [0x01, 0x01, 0x7F, 0x01, 0x01],
#    'U'  :  [0x3F, 0x40, 0x40, 0x40, 0x3F],
#    'V'  :  [0x1F, 0x20, 0x40, 0x20, 0x1F],
#    'W'  :  [0x7F, 0x20, 0x18, 0x20, 0x7F],
#    'X'  :  [0x63, 0x14, 0x08, 0x14, 0x63],
#    'Y'  :  [0x03, 0x04, 0x78, 0x04, 0x03],
#    'Z'  :  [0x61, 0x51, 0x49, 0x45, 0x43],
#    '['  :  [0x00, 0x00, 0x7F, 0x41, 0x41],
#    '\\' :  [0x02, 0x04, 0x08, 0x10, 0x20],
#    ']'  :  [0x41, 0x41, 0x7F, 0x00, 0x00],
#    '^'  :  [0x04, 0x02, 0x01, 0x02, 0x04],
#    '_'  :  [0x40, 0x40, 0x40, 0x40, 0x40],
#    '`'  :  [0x00, 0x01, 0x02, 0x04, 0x00],
#    'a'  :  [0x20, 0x54, 0x54, 0x54, 0x78],
#    'b'  :  [0x7F, 0x48, 0x44, 0x44, 0x38],
#    'c'  :  [0x38, 0x44, 0x44, 0x44, 0x20],
#    'd'  :  [0x38, 0x44, 0x44, 0x48, 0x7F],
#    'e'  :  [0x38, 0x54, 0x54, 0x54, 0x18],
#    'f'  :  [0x08, 0x7E, 0x09, 0x01, 0x02],
#    'g'  :  [0x08, 0x14, 0x54, 0x54, 0x3C],
#    'h'  :  [0x7F, 0x08, 0x04, 0x04, 0x78],
#    'i'  :  [0x00, 0x44, 0x7D, 0x40, 0x00],
#    'j'  :  [0x20, 0x40, 0x44, 0x3D, 0x00],
#    'k'  :  [0x00, 0x7F, 0x10, 0x28, 0x44],
#    'l'  :  [0x00, 0x41, 0x7F, 0x40, 0x00],
#    'm'  :  [0x7C, 0x04, 0x18, 0x04, 0x78],
#    'n'  :  [0x7C, 0x08, 0x04, 0x04, 0x78],
#    'o'  :  [0x38, 0x44, 0x44, 0x44, 0x38],
#    'p'  :  [0x7C, 0x14, 0x14, 0x14, 0x08],
#    'q'  :  [0x08, 0x14, 0x14, 0x18, 0x7C],
#    'r'  :  [0x7C, 0x08, 0x04, 0x04, 0x08],
#    's'  :  [0x48, 0x54, 0x54, 0x54, 0x20],
#    't'  :  [0x04, 0x3F, 0x44, 0x40, 0x20],
#    'u'  :  [0x3C, 0x40, 0x40, 0x20, 0x7C],
#    'v'  :  [0x1C, 0x20, 0x40, 0x20, 0x1C],
#    'w'  :  [0x3C, 0x40, 0x30, 0x40, 0x3C],
#    'x'  :  [0x44, 0x28, 0x10, 0x28, 0x44],
#    'y'  :  [0x0C, 0x50, 0x50, 0x50, 0x3C],
#    'z'  :  [0x44, 0x64, 0x54, 0x4C, 0x44],
#    '{'  :  [0x00, 0x08, 0x36, 0x41, 0x00],
#    '|'  :  [0x00, 0x00, 0x7F, 0x00, 0x00],
#    '}'  :  [0x00, 0x41, 0x36, 0x08, 0x00],
    }

def QPixmapToArr(incomingImage):
    incomingImage = QtGui.QImage(incomingImage)
    return QImageToArr(incomingImage)

def QImageToArr(incomingImage):
    '''  Converts a QImage into an opencv MAT format  '''
    incomingImage = incomingImage.convertToFormat(QtGui.QImage.Format_RGB32)
    width  = incomingImage.width()
    height = incomingImage.height()
    ptr    = incomingImage.bits()
    ptr.setsize(width*height)
    arr    = np.array(ptr)
    print arr
    exit()
    arr    = arr.reshape(width, height)  #  Copies the data
    return arr

def convertToQPixmap(font):
    pm = {}
    im = {}
    arr = {}
    for ch in font:
        data = font[ch]
        img = QtGui.QImage(5, 7, QtGui.QImage.Format_Mono)
        for x in range(5):
            for y in range(7):
                if (data[x] & (1<<y)):
                    c = 0
                else:
                    c = 1
                img.setPixel(x, y, c)
        pix = QtGui.QPixmap.fromImage(img)
        pm[ch] = pix
        im[ch] = img
        arr[ch] = QPixmapToArr(pix)
    return pm, im, arr


def getBestChar(snippet, font_arr):
    bestScore = None
    bestChar = None
    for ch in font_arr:
        ch_pix = font_arr[ch]
        dist = np.sqrt(np.average(pow(snippet - ch_pix, 2)))
        if (bestScore == None):
            bestScore = dist
            bestChar = ch
        if (dist < bestScore):
            bestScore = dist
            bestChar = ch
    return bestChar

def QPixmapToText(pixmap, font_arr):
    arr = QPixmapToArr(pixmap) # Convert the pixmap to an array.
    print np.shape(arr)
    print arr[0][0]
    exit()
    w = pixmap.width()
    h = pixmap.height()
    w_ch = w / 5
    h_ch = h / 7
    for y in range(h_ch):
        for x in range(w_ch):
            snippet = arr[x*5:(x+1)*5,
                          y*7:(y+1)*7]
            ch = getBestChar(snippet, font_arr)
            sys.stdout.write(ch)
            sys.stdout.flush()
        sys.stdout.write("\n")

class Example(QtGui.QWidget):
    def __init__(self):
        super(Example, self).__init__()
        self.arr = None
        self.initUI()
        self.font_pm, self.font_im, self.font_arr = convertToQPixmap(font)
        w = 30
        h = 20
        self.qpm = QtGui.QPixmap(w, h)
        self.fill_some_stuff(self.qpm)
        the_text = QPixmapToText(self.qpm, self.font_arr)
        
    def initUI(self):
        self.setGeometry(300, 300, 280, 170)
        self.setWindowTitle('Draw text')
        self.show()
                
    def paintEvent(self, event):
        qp = QtGui.QPainter()
        qp.begin(self)
        self.drawText(event, qp)
        qp.end()
            
    def drawDots(self, event, qp):
        r = event.rect()
        startx = r.x()
        starty = r.y()
        endx   = r.x() + r.width()
        endy   = r.y() + r.height()
        #startx, starty, endx, endy
        qp.setPen(QtGui.QColor(168, 34, 3))
        #qp.drawText(event.rect(), QtCore.Qt.AlignCenter, "Hello")
        print event.rect()
        t = "Hello"
        for x in range(startx, endx, 5):
            for y in range(starty, endy, 7):
                #qp.drawRect(x * 2, y * 2, 2, 2)
                qp.drawRect(x, y, 1, 1)

    def fill_some_stuff(self, qpm):
        qpm.fill(QtGui.QColor(255, 255, 255))
        qpm_pd = QtGui.QPainter()
        qpm_pd.begin(qpm)
        p = qpm_pd
        #p.drawRect(20, 20, 50, 50)
        p.drawLine(0, 00, 100, 100)
        qpm_pd.end()
        
    def drawText(self, event, qp):
        w = event.rect().width()
        h = event.rect().height()
        qp.drawPixmap(0, 0, self.qpm)
        #self.drawDots(event, qp)
        #x = 0
        #y = 0
        #for f in self.font_pm:
        #    qp.drawPixmap(x * 5, y * 7, self.font_pm[f])
        #    x = x + 1
        #    if (x > 12):
        #        x = 0
        #        y = y + 1
                
def main():
    app = QtGui.QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
                                                                                                                                                                    
